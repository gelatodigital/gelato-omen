{
  "address": "0xfE05eF5eaC58d9fB8D56941177A4AD93F7787C11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "hashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "masterCopies",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_gelatoCore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gelatoActionPipeline",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mastercopy",
          "type": "address"
        }
      ],
      "name": "LogProvideMastercopy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "extcodehash",
          "type": "bytes32"
        }
      ],
      "name": "LogProvideProxyExtcodehash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mastercopy",
          "type": "address"
        }
      ],
      "name": "LogUnprovideMastercopy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "extcodehash",
          "type": "bytes32"
        }
      ],
      "name": "LogUnprovideProxyExtcodehash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract IGelatoCondition",
                  "name": "inst",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Condition[]",
              "name": "conditions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "enum Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "enum DataFlow",
                  "name": "dataFlow",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "termsOkCheck",
                  "type": "bool"
                }
              ],
              "internalType": "struct Action[]",
              "name": "actions",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "selfProviderGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selfProviderGasPriceCeil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Task",
          "name": "_task",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "execPayload",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "proxyReturndataCheck",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proxyReturndata",
          "type": "bytes"
        }
      ],
      "name": "execRevertCheck",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelatoActionPipeline",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelatoCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMastercopyProvided",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract IGelatoCondition",
                  "name": "inst",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Condition[]",
              "name": "conditions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "enum Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "enum DataFlow",
                  "name": "dataFlow",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "termsOkCheck",
                  "type": "bool"
                }
              ],
              "internalType": "struct Action[]",
              "name": "actions",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "selfProviderGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selfProviderGasPriceCeil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Task",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "isProvided",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isProxyExtcodehashProvided",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_hashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_mastercopies",
          "type": "address[]"
        }
      ],
      "name": "multiProvide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_hashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_mastercopies",
          "type": "address[]"
        }
      ],
      "name": "multiUnprovide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_mastercopies",
          "type": "address[]"
        }
      ],
      "name": "provideMastercopies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_hashes",
          "type": "bytes32[]"
        }
      ],
      "name": "provideProxyExtcodehashes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_mastercopies",
          "type": "address[]"
        }
      ],
      "name": "unprovideMastercopies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_hashes",
          "type": "bytes32[]"
        }
      ],
      "name": "unprovideProxyExtcodehashes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x327f49195f210a834ca0f6b6560894ad384b24893736243416f5269a03543e7e",
  "receipt": {
    "to": null,
    "from": "0xAabB54394E8dd61Dd70897E9c80be8de7C64A895",
    "contractAddress": "0xfE05eF5eaC58d9fB8D56941177A4AD93F7787C11",
    "transactionIndex": 17,
    "gasUsed": "1722624",
    "logsBloom": "0x000000000000000000000000000000000000000000000004008000000010000080000000020080000000000000040000000000000000000000000000004000000000000000000000000000000000400000010000000000000004000000000000000000000240000000000004000008000000000000000000000000000000004000000800000000000130000000000000000000000000000000000000000000000000000000000000800000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000400000000000040000000000000000000000000000200000000",
    "blockHash": "0xc082f9e9032adfab7f88119130a651456fbd50c5eee8e5e794709c581d5c86b8",
    "transactionHash": "0x327f49195f210a834ca0f6b6560894ad384b24893736243416f5269a03543e7e",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 7718336,
        "transactionHash": "0x327f49195f210a834ca0f6b6560894ad384b24893736243416f5269a03543e7e",
        "address": "0xfE05eF5eaC58d9fB8D56941177A4AD93F7787C11",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aabb54394e8dd61dd70897e9c80be8de7c64a895"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0xc082f9e9032adfab7f88119130a651456fbd50c5eee8e5e794709c581d5c86b8"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 7718336,
        "transactionHash": "0x327f49195f210a834ca0f6b6560894ad384b24893736243416f5269a03543e7e",
        "address": "0xfE05eF5eaC58d9fB8D56941177A4AD93F7787C11",
        "topics": [
          "0x0e134ed5735ceae5acaeb65ccde8ecdb5ec85f5ca8486fa26fc6a2e698a49d96",
          "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0xc082f9e9032adfab7f88119130a651456fbd50c5eee8e5e794709c581d5c86b8"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 7718336,
        "transactionHash": "0x327f49195f210a834ca0f6b6560894ad384b24893736243416f5269a03543e7e",
        "address": "0xfE05eF5eaC58d9fB8D56941177A4AD93F7787C11",
        "topics": [
          "0x45d511b213e6ceb7178b96277138e1b2c6976564c8cd63f20c57383c0f344cee",
          "0x00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0xc082f9e9032adfab7f88119130a651456fbd50c5eee8e5e794709c581d5c86b8"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 7718336,
        "transactionHash": "0x327f49195f210a834ca0f6b6560894ad384b24893736243416f5269a03543e7e",
        "address": "0xfE05eF5eaC58d9fB8D56941177A4AD93F7787C11",
        "topics": [
          "0x45d511b213e6ceb7178b96277138e1b2c6976564c8cd63f20c57383c0f344cee",
          "0x0000000000000000000000006851d6fdfafd08c0295c392436245e5bc78b0185"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0xc082f9e9032adfab7f88119130a651456fbd50c5eee8e5e794709c581d5c86b8"
      }
    ],
    "blockNumber": 7718336,
    "cumulativeGasUsed": "3588392",
    "status": 1,
    "byzantium": true
  },
  "args": [
    ["0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"],
    [
      "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
      "0x6851D6fDFAfD08c0295C392436245E5bc78B0185"
    ],
    "0x733aDEf4f8346FD96107d8d6605eA9ab5645d632",
    "0xbB193c525fdB29Cdea7261452568D83AD476ed5D"
  ],
  "solcInputHash": "36f73464516e15f1e70290a6b16d805a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"masterCopies\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gelatoActionPipeline\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mastercopy\",\"type\":\"address\"}],\"name\":\"LogProvideMastercopy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"extcodehash\",\"type\":\"bytes32\"}],\"name\":\"LogProvideProxyExtcodehash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mastercopy\",\"type\":\"address\"}],\"name\":\"LogUnprovideMastercopy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"extcodehash\",\"type\":\"bytes32\"}],\"name\":\"LogUnprovideProxyExtcodehash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IGelatoCondition\",\"name\":\"inst\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Condition[]\",\"name\":\"conditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"enum DataFlow\",\"name\":\"dataFlow\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"termsOkCheck\",\"type\":\"bool\"}],\"internalType\":\"struct Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasPriceCeil\",\"type\":\"uint256\"}],\"internalType\":\"struct Task\",\"name\":\"_task\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"execPayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"proxyReturndataCheck\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proxyReturndata\",\"type\":\"bytes\"}],\"name\":\"execRevertCheck\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoActionPipeline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMastercopyProvided\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IGelatoCondition\",\"name\":\"inst\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Condition[]\",\"name\":\"conditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"enum DataFlow\",\"name\":\"dataFlow\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"termsOkCheck\",\"type\":\"bool\"}],\"internalType\":\"struct Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasPriceCeil\",\"type\":\"uint256\"}],\"internalType\":\"struct Task\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"isProvided\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isProxyExtcodehashProvided\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_hashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_mastercopies\",\"type\":\"address[]\"}],\"name\":\"multiProvide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_hashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_mastercopies\",\"type\":\"address[]\"}],\"name\":\"multiUnprovide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_mastercopies\",\"type\":\"address[]\"}],\"name\":\"provideMastercopies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_hashes\",\"type\":\"bytes32[]\"}],\"name\":\"provideProxyExtcodehashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_mastercopies\",\"type\":\"address[]\"}],\"name\":\"unprovideMastercopies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_hashes\",\"type\":\"bytes32[]\"}],\"name\":\"unprovideProxyExtcodehashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ProviderModuleGnosisSafe.sol\":\"ProviderModuleGnosisSafe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/external/Ownable.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xbd17809400b98353ba6de08b9529d3213cd008eebc059728b0538bbd409f64a1\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_actions/GelatoActionPipeline.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Operation, DataFlow} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\nimport {GelatoBytes} from \\\"../libraries/GelatoBytes.sol\\\";\\nimport {IGelatoInFlowAction} from \\\"./action_pipeline_interfaces/IGelatoInFlowAction.sol\\\";\\nimport {IGelatoOutFlowAction} from \\\"./action_pipeline_interfaces/IGelatoOutFlowAction.sol\\\";\\nimport {\\n    IGelatoInAndOutFlowAction\\n} from \\\"./action_pipeline_interfaces/IGelatoInAndOutFlowAction.sol\\\";\\n\\n/// @title GelatoActionPipeline\\n/// @notice Runtime Environment for executing multiple Actions that can share data\\ncontract GelatoActionPipeline {\\n\\n    using GelatoBytes for bytes;\\n\\n    address public immutable thisActionAddress;\\n    constructor() public { thisActionAddress = address(this); }\\n\\n    /// @notice This code can be delegatecalled by User Proxies during the execution\\n    ///  of multiple Actions, in order to let data flow between them, in\\n    ///  accordance with their Action.DataFlow specifications.\\n    /// @dev ProviderModules should encode their execPayload with this function selector.\\n    /// @param _actions List of _actions to be executed sequentially in pipeline\\n    function execActionsAndPipeData(Action[] calldata _actions) external {\\n        require(thisActionAddress != address(this), \\\"GelatoActionPipeline.delegatecallOnly\\\");\\n\\n        // Store for reusable data from Actions that DataFlow.Out or DataFlow.InAndOut\\n        bytes memory dataFromLastOutFlowAction;\\n\\n        // We execute Actions sequentially and store reusable outflowing Data\\n        for (uint i = 0; i < _actions.length; i++) {\\n            require(_actions[i].addr != address(0), \\\"GelatoActionPipeline.noZeroAddress\\\");\\n\\n            bytes memory actionPayload;\\n\\n            if (_actions[i].dataFlow == DataFlow.In) {\\n                actionPayload = abi.encodeWithSelector(\\n                    IGelatoInFlowAction.execWithDataFlowIn.selector,\\n                    _actions[i].data,\\n                    dataFromLastOutFlowAction\\n                );\\n            } else if (_actions[i].dataFlow == DataFlow.Out) {\\n                actionPayload = abi.encodeWithSelector(\\n                    IGelatoOutFlowAction.execWithDataFlowOut.selector,\\n                    _actions[i].data\\n                );\\n            } else if (_actions[i].dataFlow == DataFlow.InAndOut) {\\n                actionPayload = abi.encodeWithSelector(\\n                    IGelatoInAndOutFlowAction.execWithDataFlowInAndOut.selector,\\n                    _actions[i].data,\\n                    dataFromLastOutFlowAction\\n                );\\n            } else {\\n                actionPayload = _actions[i].data;\\n            }\\n\\n            bool success;\\n            bytes memory returndata;\\n            if (_actions[i].operation == Operation.Call){\\n                (success, returndata) = _actions[i].addr.call{value: _actions[i].value}(\\n                    actionPayload\\n                );\\n            } else {\\n                (success, returndata) = _actions[i].addr.delegatecall(actionPayload);\\n            }\\n\\n            if (!success)\\n                returndata.revertWithErrorString(\\\"GelatoActionPipeline.execActionsAndPipeData:\\\");\\n\\n            if (\\n                _actions[i].dataFlow == DataFlow.Out ||\\n                _actions[i].dataFlow == DataFlow.InAndOut\\n            ) {\\n                // All OutFlow actions return (bytes memory). But the low-level\\n                // delegatecall encoded those bytes into returndata.\\n                // So we have to decode them again to obtain the original bytes value.\\n                dataFromLastOutFlowAction = abi.decode(returndata, (bytes));\\n            }\\n        }\\n    }\\n\\n    function isValid(Action[] calldata _actions)\\n        external\\n        pure\\n        returns (\\n            bool ok,\\n            uint256 outActionIndex,\\n            uint256 inActionIndex,\\n            bytes32 currentOutflowType,\\n            bytes32 nextInflowType\\n        )\\n    {\\n        ok = true;\\n        for (uint256 i = 0; i < _actions.length; i++) {\\n            if (_actions[i].dataFlow == DataFlow.In || _actions[i].dataFlow == DataFlow.InAndOut) {\\n                // Make sure currentOutflowType matches what the inFlowAction expects\\n                try IGelatoInFlowAction(_actions[i].addr).DATA_FLOW_IN_TYPE()\\n                    returns (bytes32 inFlowType)\\n                {\\n                    if (inFlowType != currentOutflowType) {\\n                        nextInflowType = inFlowType;\\n                        inActionIndex = i;\\n                        ok = false;\\n                        break;\\n                    } else {\\n                        ok = true;\\n                    }\\n                } catch {\\n                    revert(\\\"GelatoActionPipeline.isValid: error DATA_FLOW_IN_TYPE\\\");\\n                }\\n            }\\n            if (_actions[i].dataFlow == DataFlow.Out || _actions[i].dataFlow == DataFlow.InAndOut) {\\n                if (ok == false) break;\\n                // Store this Actions outFlowType to be used by the next inFlowAction\\n                try IGelatoOutFlowAction(_actions[i].addr).DATA_FLOW_OUT_TYPE()\\n                    returns (bytes32 outFlowType)\\n                {\\n                    currentOutflowType = outFlowType;\\n                    outActionIndex = i;\\n                    ok = false;\\n                } catch {\\n                    revert(\\\"GelatoActionPipeline.isValid: error DATA_FLOW_OUT_TYPE\\\");\\n                }\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xe8ef526f999c395ad5f25a00b220901644a5f7bbefc251dd98b6ec8296acccb3\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_actions/action_pipeline_interfaces/IGelatoInAndOutFlowAction.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\nimport {Action} from \\\"../../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\n/// @title IGelatoInAndOutFlowAction\\n/// @notice Solidity interface for Actions that make use of DataFlow.InAndOut\\ninterface IGelatoInAndOutFlowAction {\\n\\n    /// @notice Executes the Action implementation with data flowing in from a previous\\n    ///  Action in the GelatoActionPipeline and with data flowing out to consecutive\\n    ///  Actions in the pipeline.\\n    /// @dev The _inFlowData format should be defined by DATA_FLOW_IN_TYPE and\\n    ///  the outFlowData format should be defined by DATA_FLOW_OUT_TYPE.\\n    /// @param _actionData Known prior to execution and probably encoded off-chain.\\n    /// @param _inFlowData Not known prior to execution. Passed in via GelatoActionPipeline.\\n    /// @return outFlowData The bytes encoded data this action implementation emits.\\n    function execWithDataFlowInAndOut(\\n        bytes calldata _actionData,\\n        bytes calldata _inFlowData\\n    )\\n        external\\n        payable\\n        returns (bytes memory outFlowData);\\n\\n    /// @notice Returns the expected format of the execWithDataFlowIn _inFlowData.\\n    /// @dev Strict adherence to these formats is crucial for GelatoActionPipelines.\\n    function DATA_FLOW_IN_TYPE() external pure returns (bytes32);\\n\\n    /// @notice Returns the expected format of the execWithDataFlowOut outFlowData.\\n    /// @dev Strict adherence to these formats is crucial for GelatoActionPipelines.\\n    function DATA_FLOW_OUT_TYPE() external pure returns (bytes32);\\n}\",\"keccak256\":\"0xca49b02282444c7bbae0984c0651a61474ae9395ad048490470354ef5ad52e4a\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_actions/action_pipeline_interfaces/IGelatoInFlowAction.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/// @title IGelatoInFlowAction\\n/// @notice Solidity interface for Actions that make use of DataFlow.In\\n/// @dev Inherit this, if you want your Action to use DataFlow.In in a standard way.\\ninterface IGelatoInFlowAction {\\n    /// @notice Executes the action implementation with data flowing in from a previous\\n    ///  Action in the sequence.\\n    /// @dev The _inFlowData format should be defined by DATA_FLOW_IN_TYPE\\n    /// @param _actionData Known prior to execution and probably encoded off-chain.\\n    /// @param _inFlowData Not known prior to execution. Passed in via GelatoActionPipeline.\\n    function execWithDataFlowIn(bytes calldata _actionData, bytes calldata _inFlowData)\\n        external\\n        payable;\\n\\n    /// @notice Returns the expected format of the execWithDataFlowIn _inFlowData.\\n    /// @dev Strict adherence to these formats is crucial for GelatoActionPipelines.\\n    function DATA_FLOW_IN_TYPE() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xbea8e2f67bf5a92d1751a1e001ec470bd0f9a1c0fa1ae65aadcc3d9a0771e9fb\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_actions/action_pipeline_interfaces/IGelatoOutFlowAction.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/// @title IGelatoOutFlowAction\\n/// @notice Solidity interface for Actions that make use of DataFlow.Out\\n/// @dev Inherit this, if you want implement your Action.DataFlow.Out in a standard way.\\ninterface IGelatoOutFlowAction {\\n    /// @notice Executes the Action implementation with data flowing out to consecutive\\n    ///  Actions in a GelatoActionPipeline.\\n    /// @dev The outFlowData format should be defined by DATA_FLOW_OUT_TYPE\\n    /// @param _actionData Known prior to execution and probably encoded off-chain.\\n    /// @return outFlowData The bytes encoded data this action implementation emits.\\n    function execWithDataFlowOut(bytes calldata _actionData)\\n        external\\n        payable\\n        returns (bytes memory outFlowData);\\n\\n    /// @notice Returns the expected format of the execWithDataFlowOut outFlowData.\\n    /// @dev Strict adherence to these formats is crucial for GelatoActionPipelines.\\n    function DATA_FLOW_OUT_TYPE() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc3ce10938173e83a260e69ef9bc1182406dad3a871854d3f0f367be13112a0b6\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../gelato_provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../gelato_conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\",\"keccak256\":\"0x890ea139bf550691f2b9e65bca4f7c0bcf2eb9b8a4564db8c5b42d2912f8adec\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_provider_modules/GelatoProviderModuleStandard.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"./IGelatoProviderModule.sol\\\";\\nimport {Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\nabstract contract GelatoProviderModuleStandard is IGelatoProviderModule {\\n\\n    string internal constant OK = \\\"OK\\\";\\n\\n    function isProvided(address, address, Task calldata)\\n        external\\n        view\\n        virtual\\n        override\\n        returns(string memory)\\n    {\\n        return OK;\\n    }\\n\\n    function execPayload(uint256, address, address, Task calldata, uint256)\\n        external\\n        view\\n        virtual\\n        override\\n        returns(bytes memory payload, bool)\\n    {\\n        return (payload, false);\\n    }\\n\\n    /// @dev Overriding fns should revert with the revertMsg they detected on the userProxy\\n    function execRevertCheck(bytes calldata) external pure override virtual {\\n        // By default no reverts detected => do nothing\\n    }\\n}\\n\",\"keccak256\":\"0x0c64cb22dd6f03147e1b5fad9c0584f7a9df99ec665b1047861b16233be89d94\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_provider_modules/IGelatoProviderModule.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\",\"keccak256\":\"0x8d08ceddbc4e686d070e916d2bcffc69c5a640b56866bc2cef0256b564eb14dc\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/libraries/GelatoBytes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithErrorString(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xab0503159095b0b834069eadbe7821e9c8999bc79de57ecc8e51db2b6f1101b4\",\"license\":\"UNLICENSED\"},\"contracts/ProviderModuleGnosisSafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {GelatoProviderModuleStandard} from \\\"@gelatonetwork/core/contracts/gelato_provider_modules/GelatoProviderModuleStandard.sol\\\";\\nimport {IProviderModuleGnosisSafe} from \\\"./dapp_interfaces/gnosis_safe/IProviderModuleGnosisSafe.sol\\\";\\nimport {Ownable} from \\\"@gelatonetwork/core/contracts/external/Ownable.sol\\\";\\nimport {GelatoBytes} from \\\"@gelatonetwork/core/contracts/libraries/GelatoBytes.sol\\\";\\nimport {GelatoActionPipeline} from \\\"@gelatonetwork/core/contracts/gelato_actions/GelatoActionPipeline.sol\\\";\\nimport {\\n    IGnosisSafe\\n} from \\\"./dapp_interfaces/gnosis_safe/IGnosisSafe.sol\\\";\\nimport {Task} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ncontract ProviderModuleGnosisSafe is\\n    GelatoProviderModuleStandard,\\n    IProviderModuleGnosisSafe,\\n    Ownable\\n{\\n    using GelatoBytes for bytes;\\n\\n    mapping(bytes32 => bool) public override isProxyExtcodehashProvided;\\n    mapping(address => bool) public override isMastercopyProvided;\\n    address public override immutable gelatoCore;\\n    address public override immutable gelatoActionPipeline;\\n\\n    constructor(\\n        bytes32[] memory hashes,\\n        address[] memory masterCopies,\\n        address _gelatoCore,\\n        address _gelatoActionPipeline\\n    )\\n        public\\n    {\\n        multiProvide(hashes, masterCopies);\\n        gelatoCore = _gelatoCore;\\n        gelatoActionPipeline = _gelatoActionPipeline;\\n    }\\n\\n    // ================= GELATO PROVIDER MODULE STANDARD ================\\n    // @dev since we check extcodehash prior to execution, we forego the execution option\\n    //  where the userProxy is deployed at execution time.\\n    function isProvided(address _userProxy, address, Task calldata)\\n        external\\n        view\\n        override\\n        returns(string memory)\\n    {\\n        bytes32 codehash;\\n        assembly { codehash := extcodehash(_userProxy) }\\n        if (!isProxyExtcodehashProvided[codehash])\\n            return \\\"ProviderModuleGnosisSafeProxy.isProvided:InvalidGSPCodehash\\\";\\n        address mastercopy = IGnosisSafe(_userProxy).masterCopy();\\n        if (!isMastercopyProvided[mastercopy])\\n            return \\\"ProviderModuleGnosisSafeProxy.isProvided:InvalidGSPMastercopy\\\";\\n        if (!isGelatoCoreWhitelisted(_userProxy))\\n            return \\\"ProviderModuleGnosisSafeProxy.isProvided:GelatoCoreNotWhitelisted\\\";\\n        return OK;\\n    }\\n\\n    function execPayload(uint256, address, address, Task calldata _task, uint256)\\n        external\\n        view\\n        override\\n        returns(bytes memory payload, bool proxyReturndataCheck)\\n    {\\n        // execTransactionFromModuleReturnData catches reverts so must check for reverts\\n        proxyReturndataCheck = true;\\n\\n        if (_task.actions.length == 1) {\\n            payload = abi.encodeWithSelector(\\n                IGnosisSafe.execTransactionFromModuleReturnData.selector,\\n                _task.actions[0].addr,  // to\\n                _task.actions[0].value,\\n                _task.actions[0].data,\\n                _task.actions[0].operation\\n            );\\n        } else if (_task.actions.length > 1) {\\n            // Action.Operation encoded into multiSendPayload and handled by Multisend\\n            bytes memory gelatoActionPipelinePayload = abi.encodeWithSelector(\\n                GelatoActionPipeline.execActionsAndPipeData.selector,\\n                _task.actions\\n            );\\n\\n            payload = abi.encodeWithSelector(\\n                IGnosisSafe.execTransactionFromModuleReturnData.selector,\\n                gelatoActionPipeline,  // to\\n                0,  // value\\n                gelatoActionPipelinePayload,  // data\\n                IGnosisSafe.Operation.DelegateCall\\n            );\\n\\n        } else {\\n            revert(\\\"ProviderModuleGnosisSafeProxy.execPayload: 0 _task.actions length\\\");\\n        }\\n    }\\n\\n    function execRevertCheck(bytes calldata _proxyReturndata)\\n        external\\n        pure\\n        virtual\\n        override\\n    {\\n        (bool success, bytes memory returndata) = abi.decode(_proxyReturndata, (bool,bytes));\\n        if (!success) returndata.revertWithErrorString(\\\":ProviderModuleGnosisSafeProxy:\\\");\\n    }\\n\\n    // GnosisSafeProxy\\n    function provideProxyExtcodehashes(bytes32[] memory _hashes) public override onlyOwner {\\n        for (uint i; i < _hashes.length; i++) {\\n            require(\\n                !isProxyExtcodehashProvided[_hashes[i]],\\n                \\\"ProviderModuleGnosisSafeProxy.provideProxyExtcodehashes: redundant\\\"\\n            );\\n            isProxyExtcodehashProvided[_hashes[i]] = true;\\n            emit LogProvideProxyExtcodehash(_hashes[i]);\\n        }\\n    }\\n\\n    function unprovideProxyExtcodehashes(bytes32[] memory _hashes) public override onlyOwner {\\n        for (uint i; i < _hashes.length; i++) {\\n            require(\\n                isProxyExtcodehashProvided[_hashes[i]],\\n                \\\"ProviderModuleGnosisSafeProxy.unprovideProxyExtcodehashes: redundant\\\"\\n            );\\n            delete isProxyExtcodehashProvided[_hashes[i]];\\n            emit LogUnprovideProxyExtcodehash(_hashes[i]);\\n        }\\n    }\\n\\n    function provideMastercopies(address[] memory _mastercopies) public override onlyOwner {\\n        for (uint i; i < _mastercopies.length; i++) {\\n            require(\\n                !isMastercopyProvided[_mastercopies[i]],\\n                \\\"ProviderModuleGnosisSafeProxy.provideMastercopy: redundant\\\"\\n            );\\n            isMastercopyProvided[_mastercopies[i]] = true;\\n            emit LogProvideMastercopy(_mastercopies[i]);\\n        }\\n    }\\n\\n    function unprovideMastercopies(address[] memory _mastercopies) public override onlyOwner {\\n        for (uint i; i < _mastercopies.length; i++) {\\n            require(\\n                isMastercopyProvided[_mastercopies[i]],\\n                \\\"ProviderModuleGnosisSafeProxy.unprovideMastercopies: redundant\\\"\\n            );\\n            delete isMastercopyProvided[_mastercopies[i]];\\n            emit LogUnprovideMastercopy(_mastercopies[i]);\\n        }\\n    }\\n\\n    // Batch (un-)provide\\n    function multiProvide(bytes32[] memory _hashes, address[] memory _mastercopies)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        provideProxyExtcodehashes(_hashes);\\n        provideMastercopies(_mastercopies);\\n    }\\n\\n    function multiUnprovide(bytes32[] calldata _hashes, address[] calldata _mastercopies)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        unprovideProxyExtcodehashes(_hashes);\\n        unprovideMastercopies(_mastercopies);\\n    }\\n\\n    function isGelatoCoreWhitelisted(address _userProxy)\\n        view\\n        internal\\n        returns(bool)\\n    {\\n        address[] memory whitelistedModules = IGnosisSafe(_userProxy).getModules();\\n        for (uint i = 0; i < whitelistedModules.length; i++)\\n            if (whitelistedModules[i] == gelatoCore) return true;\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x4ebcb2d33861d0b5e26567f22ed1dc7ee5dcca01a32a7c800c30ff807716e110\",\"license\":\"UNLICENSED\"},\"contracts/dapp_interfaces/gnosis_safe/IGnosisSafe.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\ninterface IGnosisSafe {\\n    enum Operation {Call, DelegateCall}\\n\\n    event ExecutionFailure(bytes32 txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 txHash, uint256 payment);\\n\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes calldata signatures\\n    ) external returns (bool success);\\n\\n    function enableModule(address module) external;\\n    function disableModule(address prevModule, address module) external;\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Operation operation\\n    ) external returns (bool success, bytes memory returndata);\\n\\n    function isOwner(address owner) external view returns (bool);\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getModules() external view returns (address[] memory);\\n    function masterCopy() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf1404d8ba6814da54da0289431605743337847625e26903ae10bf673decb0f1b\",\"license\":\"UNLICENSED\"},\"contracts/dapp_interfaces/gnosis_safe/IProviderModuleGnosisSafe.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\ninterface IProviderModuleGnosisSafe {\\n    event LogProvideProxyExtcodehash(bytes32 indexed extcodehash);\\n    event LogUnprovideProxyExtcodehash(bytes32 indexed extcodehash);\\n\\n    event LogProvideMastercopy(address indexed mastercopy);\\n    event LogUnprovideMastercopy(address indexed mastercopy);\\n\\n    // GnosisSafeProxy\\n    function provideProxyExtcodehashes(bytes32[] calldata _hashes) external;\\n    function unprovideProxyExtcodehashes(bytes32[] calldata _hashes) external;\\n\\n    function provideMastercopies(address[] calldata _mastercopies) external;\\n    function unprovideMastercopies(address[] calldata _mastercopies) external;\\n\\n    // Batch (un-)provide\\n    function multiProvide(bytes32[] calldata _hashes, address[] calldata _mastercopies)\\n        external;\\n\\n    function multiUnprovide(bytes32[] calldata _hashes, address[] calldata _mastercopies)\\n        external;\\n\\n    function isProxyExtcodehashProvided(bytes32 _hash)\\n        external\\n        view\\n        returns(bool);\\n    function isMastercopyProvided(address _mastercopy)\\n        external\\n        view\\n        returns(bool);\\n\\n\\n    function gelatoCore() external pure returns(address);\\n    function gelatoActionPipeline() external pure returns(address);\\n}\\n\",\"keccak256\":\"0x905512ad296127e863dac6ec585690d81b9f9f1cc350a965cb715a68cc6f2c1e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620022753803806200227583398101604081905262000034916200041d565b600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200009284846001600160e01b03620000b416565b6001600160601b0319606092831b8116608052911b1660a05250620006289050565b620000c76001600160e01b036200011b16565b620000ef5760405162461bcd60e51b8152600401620000e690620005ac565b60405180910390fd5b62000103826001600160e01b036200012c16565b62000117816001600160e01b036200024316565b5050565b6000546001600160a01b0316331490565b6200013f6001600160e01b036200011b16565b6200015e5760405162461bcd60e51b8152600401620000e690620005ac565b60005b81518110156200011757600160008383815181106200017c57fe5b60209081029190910181015182528101919091526040016000205460ff1615620001ba5760405162461bcd60e51b8152600401620000e69062000509565b6001806000848481518110620001cc57fe5b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055508181815181106200020657fe5b60200260200101517f0e134ed5735ceae5acaeb65ccde8ecdb5ec85f5ca8486fa26fc6a2e698a49d9660405160405180910390a260010162000161565b620002566001600160e01b036200011b16565b620002755760405162461bcd60e51b8152600401620000e690620005ac565b60005b81518110156200011757600260008383815181106200029357fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615620002da5760405162461bcd60e51b8152600401620000e69062000560565b600160026000848481518110620002ed57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508181815181106200033957fe5b60200260200101516001600160a01b03167f45d511b213e6ceb7178b96277138e1b2c6976564c8cd63f20c57383c0f344cee60405160405180910390a260010162000278565b80516001600160a01b03811681146200039757600080fd5b92915050565b600082601f830112620003ae578081fd5b8151620003c5620003bf8262000608565b620005e1565b818152915060208083019084810181840286018201871015620003e757600080fd5b60005b848110156200041257620003ff88836200037f565b84529282019290820190600101620003ea565b505050505092915050565b6000806000806080858703121562000433578384fd5b84516001600160401b03808211156200044a578586fd5b81870188601f8201126200045c578687fd5b805192506200046f620003bf8462000608565b80848252602080830192508084018c82838902870101111562000490578a8bfd5b8a94505b86851015620004b457805184526001949094019392810192810162000494565b508a01519098509350505080821115620004cc578485fd5b50620004db878288016200039d565b935050620004ed86604087016200037f565b9150620004fe86606087016200037f565b905092959194509250565b60208082526042908201526000805160206200225583398151915260408201527f6f7669646550726f7879457874636f64656861736865733a20726564756e64616060820152611b9d60f21b608082015260a00190565b6020808252603a908201526000805160206200225583398151915260408201527f6f766964654d6173746572636f70793a20726564756e64616e74000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040518181016001600160401b03811182821017156200060057600080fd5b604052919050565b60006001600160401b038211156200061e578081fd5b5060209081020190565b60805160601c60a05160601c611bf96200065c6000398061042a52806109e9525080610c8e5280610dcb5250611bf96000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063902d7dab116100a2578063cca8a78511610071578063cca8a78514610208578063e10f72a21461021b578063e7c6ca9d1461022e578063f2fde38b14610241578063fe861b99146102545761010b565b8063902d7dab146101c7578063a1cc05b8146101da578063a88fd584146101ed578063c2cd29a5146101f55761010b565b80635a48bc46116100de5780635a48bc4614610182578063715018a6146101955780638da5cb5b1461019d5780638f32d59b146101b25761010b565b806306fca728146101105780631d8773291461013a5780633e88ecf41461014f5780633f17c3df14610162575b600080fd5b61012361011e36600461138a565b61025c565b6040516101319291906116e1565b60405180910390f35b61014d6101483660046111f0565b6104c0565b005b61014d61015d366004611305565b6104fa565b610175610170366004611022565b61055e565b6040516101319190611705565b61014d610190366004611081565b6106a9565b61014d6107c5565b6101a5610833565b6040516101319190611507565b6101ba610842565b60405161013191906116d6565b61014d6101d53660046111be565b610853565b61014d6101e8366004611156565b61094b565b6101a56109e7565b61014d6102033660046111be565b610a0b565b6101ba6102163660046112ed565b610b0c565b6101ba610229366004610fea565b610b21565b61014d61023c366004611081565b610b36565b61014d61024f366004610fea565b610c5c565b6101a5610c8c565b6060600161026d6020850185611986565b9050600114156103a557635229073f60e01b61028c6020860186611986565b600081811061029757fe5b90506020028101906102a99190611a16565b6102b7906020810190610fea565b6102c46020870187611986565b60008181106102cf57fe5b90506020028101906102e19190611a16565b608001356102f26020880188611986565b60008181106102fd57fe5b905060200281019061030f9190611a16565b61031d9060208101906119d0565b61032a60208a018a611986565b600081811061033557fe5b90506020028101906103479190611a16565b61035890606081019060400161136e565b60405160240161036c959493929190611562565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915291506104b6565b60016103b46020860186611986565b90501115610495576060631ed3be5160e31b6103d36020870187611986565b6040516024016103e49291906115a5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051909150635229073f60e01b9061045a907f000000000000000000000000000000000000000000000000000000000000000090600090859060019060240161151b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292506104b69050565b60405162461bcd60e51b81526004016104ad906118b5565b60405180910390fd5b9550959350505050565b6104c8610842565b6104e45760405162461bcd60e51b81526004016104ad90611880565b6104ed82610a0b565b6104f681610b36565b5050565b6000606061050a83850185611250565b91509150816105585760408051808201909152601f81527f3a50726f76696465724d6f64756c65476e6f7369735361666550726f78793a00602082015261055890829063ffffffff610cb016565b50505050565b823f6000818152600160205260409020546060919060ff1661059b576040518060600160405280603b8152602001611b48603b91399150506106a2565b6000856001600160a01b031663a619486e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190611006565b6001600160a01b03811660009081526002602052604090205490915060ff16610653576040518060600160405280603d8152602001611b0b603d9139925050506106a2565b61065c86610d42565b61068257604051806080016040528060418152602001611b8360419139925050506106a2565b604051806040016040528060028152602001614f4b60f01b815250925050505b9392505050565b6106b1610842565b6106cd5760405162461bcd60e51b81526004016104ad90611880565b60005b81518110156104f657600260008383815181106106e957fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1661072c5760405162461bcd60e51b81526004016104ad90611718565b6002600083838151811061073c57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81549060ff021916905581818151811061078057fe5b60200260200101516001600160a01b03167f7fb15692d99576611f629f561a6f67434918a711ad1c47e67efa119524ecc45c60405160405180910390a26001016106d0565b6107cd610842565b6107e95760405162461bcd60e51b81526004016104ad90611880565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b61085b610842565b6108775760405162461bcd60e51b81526004016104ad90611880565b60005b81518110156104f6576001600083838151811061089357fe5b60209081029190910181015182528101919091526040016000205460ff166108cd5760405162461bcd60e51b81526004016104ad9061191c565b600160008383815181106108dd57fe5b6020026020010151815260200190815260200160002060006101000a81549060ff021916905581818151811061090f57fe5b60200260200101517f86f100da35cc9022687c9c9d92d28fe2affe49b1e56240285c06e020f596dc3260405160405180910390a260010161087a565b610953610842565b61096f5760405162461bcd60e51b81526004016104ad90611880565b6109ab84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061085392505050565b6105588282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506106a992505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a13610842565b610a2f5760405162461bcd60e51b81526004016104ad90611880565b60005b81518110156104f65760016000838381518110610a4b57fe5b60209081029190910181015182528101919091526040016000205460ff1615610a865760405162461bcd60e51b81526004016104ad906117bb565b6001806000848481518110610a9757fe5b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550818181518110610ad057fe5b60200260200101517f0e134ed5735ceae5acaeb65ccde8ecdb5ec85f5ca8486fa26fc6a2e698a49d9660405160405180910390a2600101610a32565b60016020526000908152604090205460ff1681565b60026020526000908152604090205460ff1681565b610b3e610842565b610b5a5760405162461bcd60e51b81526004016104ad90611880565b60005b81518110156104f65760026000838381518110610b7657fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610bba5760405162461bcd60e51b81526004016104ad90611823565b600160026000848481518110610bcc57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550818181518110610c1757fe5b60200260200101516001600160a01b03167f45d511b213e6ceb7178b96277138e1b2c6976564c8cd63f20c57383c0f344cee60405160405180910390a2600101610b5d565b610c64610842565b610c805760405162461bcd60e51b81526004016104ad90611880565b610c8981610e35565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6020825181610cbb57fe5b0660041415610d3157602082015162461bcd60e51b6001600160e01b031982161415610d20576044830192508183604051602001610cfa92919061146e565b60408051601f198184030181529082905262461bcd60e51b82526104ad91600401611705565b81604051602001610cfa919061149c565b80604051602001610cfa91906114cf565b60006060826001600160a01b031663b2494df36040518163ffffffff1660e01b815260040160006040518083038186803b158015610d7f57600080fd5b505afa158015610d93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dbb91908101906110bb565b905060005b8151811015610e29577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610dff57fe5b60200260200101516001600160a01b03161415610e2157600192505050610e30565b600101610dc0565b5060009150505b919050565b6001600160a01b038116610e5b5760405162461bcd60e51b81526004016104ad90611775565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008083601f840112610ec7578182fd5b5081356001600160401b03811115610edd578182fd5b6020830191508360208083028501011115610ef757600080fd5b9250929050565b600082601f830112610f0e578081fd5b8135610f21610f1c82611a5b565b611a35565b818152915060208083019084810181840286018201871015610f4257600080fd5b60005b84811015610f6a578135610f5881611ada565b84529282019290820190600101610f45565b505050505092915050565b600082601f830112610f85578081fd5b8135610f93610f1c82611a5b565b818152915060208083019084810181840286018201871015610fb457600080fd5b60005b84811015610f6a57813584529282019290820190600101610fb7565b600060808284031215610fe4578081fd5b50919050565b600060208284031215610ffb578081fd5b81356106a281611ada565b600060208284031215611017578081fd5b81516106a281611ada565b600080600060608486031215611036578182fd5b833561104181611ada565b9250602084013561105181611ada565b915060408401356001600160401b0381111561106b578182fd5b61107786828701610fd3565b9150509250925092565b600060208284031215611092578081fd5b81356001600160401b038111156110a7578182fd5b6110b384828501610efe565b949350505050565b600060208083850312156110cd578182fd5b82516001600160401b038111156110e2578283fd5b80840185601f8201126110f3578384fd5b80519150611103610f1c83611a5b565b828152838101908285018585028401860189101561111f578687fd5b8693505b8484101561114a57805161113681611ada565b835260019390930192918501918501611123565b50979650505050505050565b6000806000806040858703121561116b578081fd5b84356001600160401b0380821115611181578283fd5b61118d88838901610eb6565b909650945060208701359150808211156111a5578283fd5b506111b287828801610eb6565b95989497509550505050565b6000602082840312156111cf578081fd5b81356001600160401b038111156111e4578182fd5b6110b384828501610f75565b60008060408385031215611202578182fd5b82356001600160401b0380821115611218578384fd5b61122486838701610f75565b93506020850135915080821115611239578283fd5b5061124685828601610efe565b9150509250929050565b60008060408385031215611262578182fd5b823561126d81611aef565b91506020838101356001600160401b0380821115611289578384fd5b81860187601f82011261129a578485fd5b80359250818311156112aa578485fd5b6112bc601f8401601f19168501611a35565b915082825287848483010111156112d1578485fd5b8284820185840137509081019091019190915290939092509050565b6000602082840312156112fe578081fd5b5035919050565b60008060208385031215611317578182fd5b82356001600160401b038082111561132d578384fd5b81850186601f82011261133e578485fd5b803592508183111561134e578485fd5b86602084830101111561135f578485fd5b60200196919550909350505050565b60006020828403121561137f578081fd5b81356106a281611afd565b600080600080600060a086880312156113a1578283fd5b8535945060208601356113b381611ada565b935060408601356113c381611ada565b925060608601356001600160401b038111156113dd578182fd5b6113e988828901610fd3565b95989497509295608001359392505050565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611443816020860160208601611aa4565b601f01601f19169290920160200192915050565b6004811061146157fe5b9052565b61146181611ad0565b60008351611480818460208801611aa4565b8351908301611493828260208801611aa4565b01949350505050565b600082516114ae818460208701611aa4565b6e2737a2b93937b929b2b632b1ba37b960891b920191825250600f01919050565b600082516114e1818460208701611aa4565b73556e657870656374656452657475726e6461746160601b920191825250601401919050565b6001600160a01b0391909116815260200190565b6001600160a01b038516815260ff841660208201526080604082018190526000906115489083018561142b565b905061155383611ad0565b82606083015295945050505050565b600060018060a01b03871682528560208301526080604083015261158a608083018587611401565b905061159583611ad0565b8260608301529695505050505050565b602080825281810183905260009060408084018583028501820187855b888110156116c857878303603f190184528135368b900360be190181126115e7578788fd5b60c0908b0180356115f781611ada565b6001600160a01b031685528088013536829003601e1901811261161857898afd5b81018035906001600160401b03821115611630578a8bfd5b81360383131561163e578a8bfd5b838a880152611652848801838c8401611401565b61165e8a850185611a97565b945061166c8a890186611465565b6060945061167c85850185611a87565b925061168a85890184611457565b6080848101359089015260a094506116a485850185611a7a565b92506116b2858901846113fb565b978a0197965050509287019250506001016115c2565b509098975050505050505050565b901515815260200190565b6000604082526116f4604083018561142b565b905082151560208301529392505050565b6000602082526106a2602083018461142b565b6020808252603e908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e756e60408201527f70726f766964654d6173746572636f706965733a20726564756e64616e740000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526042908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e707260408201527f6f7669646550726f7879457874636f64656861736865733a20726564756e64616060820152611b9d60f21b608082015260a00190565b6020808252603a908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e707260408201527f6f766964654d6173746572636f70793a20726564756e64616e74000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526041908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e657860408201527f65635061796c6f61643a2030205f7461736b2e616374696f6e73206c656e67746060820152600d60fb1b608082015260a00190565b60208082526044908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e756e60408201527f70726f7669646550726f7879457874636f64656861736865733a20726564756e60608201526319185b9d60e21b608082015260a00190565b6000808335601e1984360301811261199c578283fd5b808401803592506001600160401b038311156119b6578384fd5b6020810193505050602081023603821315610ef757600080fd5b6000808335601e198436030181126119e6578182fd5b808401803592506001600160401b03831115611a00578384fd5b60200192505036819003821315610ef757600080fd5b6000823560be19833603018112611a2b578182fd5b9190910192915050565b6040518181016001600160401b0381118282101715611a5357600080fd5b604052919050565b60006001600160401b03821115611a70578081fd5b5060209081020190565b600082356106a281611aef565b60008235600481106106a2578182fd5b600082356106a281611afd565b60005b83811015611abf578181015183820152602001611aa7565b838111156105585750506000910152565b60028110610c8957fe5b6001600160a01b0381168114610c8957600080fd5b8015158114610c8957600080fd5b60028110610c8957600080fdfe50726f76696465724d6f64756c65476e6f7369735361666550726f78792e697350726f76696465643a496e76616c69644753504d6173746572636f707950726f76696465724d6f64756c65476e6f7369735361666550726f78792e697350726f76696465643a496e76616c6964475350436f64656861736850726f76696465724d6f64756c65476e6f7369735361666550726f78792e697350726f76696465643a47656c61746f436f72654e6f7457686974656c6973746564a26469706673582212209c12667473cf24eb323dba29c1406e4bc32fda221b146e6fbeca245f33659a6b64736f6c634300060a003350726f76696465724d6f64756c65476e6f7369735361666550726f78792e7072",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063902d7dab116100a2578063cca8a78511610071578063cca8a78514610208578063e10f72a21461021b578063e7c6ca9d1461022e578063f2fde38b14610241578063fe861b99146102545761010b565b8063902d7dab146101c7578063a1cc05b8146101da578063a88fd584146101ed578063c2cd29a5146101f55761010b565b80635a48bc46116100de5780635a48bc4614610182578063715018a6146101955780638da5cb5b1461019d5780638f32d59b146101b25761010b565b806306fca728146101105780631d8773291461013a5780633e88ecf41461014f5780633f17c3df14610162575b600080fd5b61012361011e36600461138a565b61025c565b6040516101319291906116e1565b60405180910390f35b61014d6101483660046111f0565b6104c0565b005b61014d61015d366004611305565b6104fa565b610175610170366004611022565b61055e565b6040516101319190611705565b61014d610190366004611081565b6106a9565b61014d6107c5565b6101a5610833565b6040516101319190611507565b6101ba610842565b60405161013191906116d6565b61014d6101d53660046111be565b610853565b61014d6101e8366004611156565b61094b565b6101a56109e7565b61014d6102033660046111be565b610a0b565b6101ba6102163660046112ed565b610b0c565b6101ba610229366004610fea565b610b21565b61014d61023c366004611081565b610b36565b61014d61024f366004610fea565b610c5c565b6101a5610c8c565b6060600161026d6020850185611986565b9050600114156103a557635229073f60e01b61028c6020860186611986565b600081811061029757fe5b90506020028101906102a99190611a16565b6102b7906020810190610fea565b6102c46020870187611986565b60008181106102cf57fe5b90506020028101906102e19190611a16565b608001356102f26020880188611986565b60008181106102fd57fe5b905060200281019061030f9190611a16565b61031d9060208101906119d0565b61032a60208a018a611986565b600081811061033557fe5b90506020028101906103479190611a16565b61035890606081019060400161136e565b60405160240161036c959493929190611562565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915291506104b6565b60016103b46020860186611986565b90501115610495576060631ed3be5160e31b6103d36020870187611986565b6040516024016103e49291906115a5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051909150635229073f60e01b9061045a907f000000000000000000000000000000000000000000000000000000000000000090600090859060019060240161151b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292506104b69050565b60405162461bcd60e51b81526004016104ad906118b5565b60405180910390fd5b9550959350505050565b6104c8610842565b6104e45760405162461bcd60e51b81526004016104ad90611880565b6104ed82610a0b565b6104f681610b36565b5050565b6000606061050a83850185611250565b91509150816105585760408051808201909152601f81527f3a50726f76696465724d6f64756c65476e6f7369735361666550726f78793a00602082015261055890829063ffffffff610cb016565b50505050565b823f6000818152600160205260409020546060919060ff1661059b576040518060600160405280603b8152602001611b48603b91399150506106a2565b6000856001600160a01b031663a619486e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190611006565b6001600160a01b03811660009081526002602052604090205490915060ff16610653576040518060600160405280603d8152602001611b0b603d9139925050506106a2565b61065c86610d42565b61068257604051806080016040528060418152602001611b8360419139925050506106a2565b604051806040016040528060028152602001614f4b60f01b815250925050505b9392505050565b6106b1610842565b6106cd5760405162461bcd60e51b81526004016104ad90611880565b60005b81518110156104f657600260008383815181106106e957fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1661072c5760405162461bcd60e51b81526004016104ad90611718565b6002600083838151811061073c57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81549060ff021916905581818151811061078057fe5b60200260200101516001600160a01b03167f7fb15692d99576611f629f561a6f67434918a711ad1c47e67efa119524ecc45c60405160405180910390a26001016106d0565b6107cd610842565b6107e95760405162461bcd60e51b81526004016104ad90611880565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b61085b610842565b6108775760405162461bcd60e51b81526004016104ad90611880565b60005b81518110156104f6576001600083838151811061089357fe5b60209081029190910181015182528101919091526040016000205460ff166108cd5760405162461bcd60e51b81526004016104ad9061191c565b600160008383815181106108dd57fe5b6020026020010151815260200190815260200160002060006101000a81549060ff021916905581818151811061090f57fe5b60200260200101517f86f100da35cc9022687c9c9d92d28fe2affe49b1e56240285c06e020f596dc3260405160405180910390a260010161087a565b610953610842565b61096f5760405162461bcd60e51b81526004016104ad90611880565b6109ab84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061085392505050565b6105588282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506106a992505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a13610842565b610a2f5760405162461bcd60e51b81526004016104ad90611880565b60005b81518110156104f65760016000838381518110610a4b57fe5b60209081029190910181015182528101919091526040016000205460ff1615610a865760405162461bcd60e51b81526004016104ad906117bb565b6001806000848481518110610a9757fe5b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550818181518110610ad057fe5b60200260200101517f0e134ed5735ceae5acaeb65ccde8ecdb5ec85f5ca8486fa26fc6a2e698a49d9660405160405180910390a2600101610a32565b60016020526000908152604090205460ff1681565b60026020526000908152604090205460ff1681565b610b3e610842565b610b5a5760405162461bcd60e51b81526004016104ad90611880565b60005b81518110156104f65760026000838381518110610b7657fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610bba5760405162461bcd60e51b81526004016104ad90611823565b600160026000848481518110610bcc57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550818181518110610c1757fe5b60200260200101516001600160a01b03167f45d511b213e6ceb7178b96277138e1b2c6976564c8cd63f20c57383c0f344cee60405160405180910390a2600101610b5d565b610c64610842565b610c805760405162461bcd60e51b81526004016104ad90611880565b610c8981610e35565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6020825181610cbb57fe5b0660041415610d3157602082015162461bcd60e51b6001600160e01b031982161415610d20576044830192508183604051602001610cfa92919061146e565b60408051601f198184030181529082905262461bcd60e51b82526104ad91600401611705565b81604051602001610cfa919061149c565b80604051602001610cfa91906114cf565b60006060826001600160a01b031663b2494df36040518163ffffffff1660e01b815260040160006040518083038186803b158015610d7f57600080fd5b505afa158015610d93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dbb91908101906110bb565b905060005b8151811015610e29577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610dff57fe5b60200260200101516001600160a01b03161415610e2157600192505050610e30565b600101610dc0565b5060009150505b919050565b6001600160a01b038116610e5b5760405162461bcd60e51b81526004016104ad90611775565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008083601f840112610ec7578182fd5b5081356001600160401b03811115610edd578182fd5b6020830191508360208083028501011115610ef757600080fd5b9250929050565b600082601f830112610f0e578081fd5b8135610f21610f1c82611a5b565b611a35565b818152915060208083019084810181840286018201871015610f4257600080fd5b60005b84811015610f6a578135610f5881611ada565b84529282019290820190600101610f45565b505050505092915050565b600082601f830112610f85578081fd5b8135610f93610f1c82611a5b565b818152915060208083019084810181840286018201871015610fb457600080fd5b60005b84811015610f6a57813584529282019290820190600101610fb7565b600060808284031215610fe4578081fd5b50919050565b600060208284031215610ffb578081fd5b81356106a281611ada565b600060208284031215611017578081fd5b81516106a281611ada565b600080600060608486031215611036578182fd5b833561104181611ada565b9250602084013561105181611ada565b915060408401356001600160401b0381111561106b578182fd5b61107786828701610fd3565b9150509250925092565b600060208284031215611092578081fd5b81356001600160401b038111156110a7578182fd5b6110b384828501610efe565b949350505050565b600060208083850312156110cd578182fd5b82516001600160401b038111156110e2578283fd5b80840185601f8201126110f3578384fd5b80519150611103610f1c83611a5b565b828152838101908285018585028401860189101561111f578687fd5b8693505b8484101561114a57805161113681611ada565b835260019390930192918501918501611123565b50979650505050505050565b6000806000806040858703121561116b578081fd5b84356001600160401b0380821115611181578283fd5b61118d88838901610eb6565b909650945060208701359150808211156111a5578283fd5b506111b287828801610eb6565b95989497509550505050565b6000602082840312156111cf578081fd5b81356001600160401b038111156111e4578182fd5b6110b384828501610f75565b60008060408385031215611202578182fd5b82356001600160401b0380821115611218578384fd5b61122486838701610f75565b93506020850135915080821115611239578283fd5b5061124685828601610efe565b9150509250929050565b60008060408385031215611262578182fd5b823561126d81611aef565b91506020838101356001600160401b0380821115611289578384fd5b81860187601f82011261129a578485fd5b80359250818311156112aa578485fd5b6112bc601f8401601f19168501611a35565b915082825287848483010111156112d1578485fd5b8284820185840137509081019091019190915290939092509050565b6000602082840312156112fe578081fd5b5035919050565b60008060208385031215611317578182fd5b82356001600160401b038082111561132d578384fd5b81850186601f82011261133e578485fd5b803592508183111561134e578485fd5b86602084830101111561135f578485fd5b60200196919550909350505050565b60006020828403121561137f578081fd5b81356106a281611afd565b600080600080600060a086880312156113a1578283fd5b8535945060208601356113b381611ada565b935060408601356113c381611ada565b925060608601356001600160401b038111156113dd578182fd5b6113e988828901610fd3565b95989497509295608001359392505050565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611443816020860160208601611aa4565b601f01601f19169290920160200192915050565b6004811061146157fe5b9052565b61146181611ad0565b60008351611480818460208801611aa4565b8351908301611493828260208801611aa4565b01949350505050565b600082516114ae818460208701611aa4565b6e2737a2b93937b929b2b632b1ba37b960891b920191825250600f01919050565b600082516114e1818460208701611aa4565b73556e657870656374656452657475726e6461746160601b920191825250601401919050565b6001600160a01b0391909116815260200190565b6001600160a01b038516815260ff841660208201526080604082018190526000906115489083018561142b565b905061155383611ad0565b82606083015295945050505050565b600060018060a01b03871682528560208301526080604083015261158a608083018587611401565b905061159583611ad0565b8260608301529695505050505050565b602080825281810183905260009060408084018583028501820187855b888110156116c857878303603f190184528135368b900360be190181126115e7578788fd5b60c0908b0180356115f781611ada565b6001600160a01b031685528088013536829003601e1901811261161857898afd5b81018035906001600160401b03821115611630578a8bfd5b81360383131561163e578a8bfd5b838a880152611652848801838c8401611401565b61165e8a850185611a97565b945061166c8a890186611465565b6060945061167c85850185611a87565b925061168a85890184611457565b6080848101359089015260a094506116a485850185611a7a565b92506116b2858901846113fb565b978a0197965050509287019250506001016115c2565b509098975050505050505050565b901515815260200190565b6000604082526116f4604083018561142b565b905082151560208301529392505050565b6000602082526106a2602083018461142b565b6020808252603e908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e756e60408201527f70726f766964654d6173746572636f706965733a20726564756e64616e740000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526042908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e707260408201527f6f7669646550726f7879457874636f64656861736865733a20726564756e64616060820152611b9d60f21b608082015260a00190565b6020808252603a908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e707260408201527f6f766964654d6173746572636f70793a20726564756e64616e74000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526041908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e657860408201527f65635061796c6f61643a2030205f7461736b2e616374696f6e73206c656e67746060820152600d60fb1b608082015260a00190565b60208082526044908201527f50726f76696465724d6f64756c65476e6f7369735361666550726f78792e756e60408201527f70726f7669646550726f7879457874636f64656861736865733a20726564756e60608201526319185b9d60e21b608082015260a00190565b6000808335601e1984360301811261199c578283fd5b808401803592506001600160401b038311156119b6578384fd5b6020810193505050602081023603821315610ef757600080fd5b6000808335601e198436030181126119e6578182fd5b808401803592506001600160401b03831115611a00578384fd5b60200192505036819003821315610ef757600080fd5b6000823560be19833603018112611a2b578182fd5b9190910192915050565b6040518181016001600160401b0381118282101715611a5357600080fd5b604052919050565b60006001600160401b03821115611a70578081fd5b5060209081020190565b600082356106a281611aef565b60008235600481106106a2578182fd5b600082356106a281611afd565b60005b83811015611abf578181015183820152602001611aa7565b838111156105585750506000910152565b60028110610c8957fe5b6001600160a01b0381168114610c8957600080fd5b8015158114610c8957600080fd5b60028110610c8957600080fdfe50726f76696465724d6f64756c65476e6f7369735361666550726f78792e697350726f76696465643a496e76616c69644753504d6173746572636f707950726f76696465724d6f64756c65476e6f7369735361666550726f78792e697350726f76696465643a496e76616c6964475350436f64656861736850726f76696465724d6f64756c65476e6f7369735361666550726f78792e697350726f76696465643a47656c61746f436f72654e6f7457686974656c6973746564a26469706673582212209c12667473cf24eb323dba29c1406e4bc32fda221b146e6fbeca245f33659a6b64736f6c634300060a0033",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 163,
        "contract": "contracts/ProviderModuleGnosisSafe.sol:ProviderModuleGnosisSafe",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4608,
        "contract": "contracts/ProviderModuleGnosisSafe.sol:ProviderModuleGnosisSafe",
        "label": "isProxyExtcodehashProvided",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4613,
        "contract": "contracts/ProviderModuleGnosisSafe.sol:ProviderModuleGnosisSafe",
        "label": "isMastercopyProvided",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
